name: "cf-pages: full-site build & deploy"

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      branch:
        description: Branch to build
        required: true
        default: main

env:
  CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
  CF_API_TOKEN:  ${{ secrets.CF_API_TOKEN }}
  CF_STAGING_PROJECT: lgfc-staging
  CF_PROD_PROJECT:    lgfc-prod

jobs:
  build:
    name: Build Next.js (entire site for Pages)
    runs-on: ubuntu-latest
    outputs:
      outdir: ${{ steps.mark.outputs.outdir }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch || 'main' }}

      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Validate project plan files exist (guards against partial repo)
        run: |
          set -e
          test -f pages/_app.tsx
          test -f pages/index.tsx
          test -f pages/api/healthz.ts
          test -f components/Nav.tsx
          test -f components/Layout.tsx
          test -f postcss.config.mjs

      - name: Build Next
        run: npm run build

      - name: Adapt for Cloudflare Pages (next-on-pages)
        run: npx @cloudflare/next-on-pages@latest

      - name: Mark output dir
        id: mark
        run: echo "outdir=.vercel/output/static" >> "$GITHUB_OUTPUT"

      - name: "Sanity: static output exists"
        run: |
          test -d .vercel/output/static || { echo "::error::No .vercel/output/static (adapter failed)"; exit 1; }
          find .vercel/output/static -maxdepth 2 -type f | head -n 50

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: next-on-pages-output
          path: .vercel/output/static
          if-no-files-found: error

  deploy-staging:
    name: Deploy to Pages (staging)
    needs: build
    runs-on: ubuntu-latest
    outputs:
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: next-on-pages-output
          path: out

      - name: Install Wrangler
        run: npm i -g wrangler@^3

      - name: Ensure staging project exists
        run: npx wrangler pages project create "${{ env.CF_STAGING_PROJECT }}" --production-branch main || true

      - name: Deploy staging
        id: deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ env.CF_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ env.CF_ACCOUNT_ID }}
        run: |
          set -e
          OUT=$(wrangler pages deploy out --project-name "${{ env.CF_STAGING_PROJECT }}" --branch main --commit-dirty=true --format json)
          echo "$OUT" > /tmp/stg.json
          URL=$(jq -r '..|.url? // empty' /tmp/stg.json | tail -n1)
          test -n "$URL" || { echo "::error::No staging URL from deploy"; exit 2; }
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "Staging: $URL"

  deploy-prod:
    name: Deploy to Pages (production)
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    outputs:
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: next-on-pages-output
          path: out

      - name: Install Wrangler
        run: npm i -g wrangler@^3

      - name: Ensure prod project exists
        run: npx wrangler pages project create "${{ env.CF_PROD_PROJECT }}" --production-branch main || true

      - name: Deploy prod
        id: deploy
        env:
          CLOUDFLARE_API_TOKEN: ${{ env.CF_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ env.CF_ACCOUNT_ID }}
        run: |
          set -e
          OUT=$(wrangler pages deploy out --project-name "${{ env.CF_PROD_PROJECT }}" --branch main --commit-dirty=true --format json)
          echo "$OUT" > /tmp/prod.json
          URL=$(jq -r '..|.url? // empty' /tmp/prod.json | tail -n1)
          test -n "$URL" || { echo "::error::No prod URL from deploy"; exit 2; }
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "Prod: $URL"

  verify:
    name: Verify required routes (project plan)
    needs: [deploy-staging, deploy-prod]
    if: always() && needs.deploy-staging.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Check staging routes
        run: |
          URL="${{ needs.deploy-staging.outputs.url }}"
          test -n "$URL" || { echo "::error::Missing staging URL"; exit 1; }
          for path in "/" "/weekly" "/milestones" "/charities" "/about" "/api/healthz"; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$URL$path" || true)
            echo "$path -> $code"
            [ "$code" = "200" ] || { echo "::error::Staging $path returned $code"; exit 1; }
          done

      - name: Check production routes (only if prod deployed in this run)
        if: needs.deploy-prod.result == 'success'
        run: |
          URL="${{ needs.deploy-prod.outputs.url }}"
          test -n "$URL" || { echo "Prod URL not available in this context"; exit 0; }
          for path in "/" "/weekly" "/milestones" "/charities" "/about" "/api/healthz"; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "$URL$path" || true)
            echo "$path -> $code"
            [ "$code" = "200" ] || { echo "::error::Prod $path returned $code"; exit 1; }
          done
