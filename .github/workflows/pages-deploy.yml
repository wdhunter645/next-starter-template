name: Deploy to Cloudflare Pages (Hardened)
on:
  workflow_dispatch:
    inputs:
      environment:
        description: Environment
        required: true
        type: choice
        options: [staging, production]
        default: staging
      branch:
        description: Git branch to deploy
        required: true
        default: main
permissions:
  contents: read
jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      CF_API_TOKEN:  ${{ secrets.CF_API_TOKEN }}
      CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
      NEXT_TELEMETRY_DISABLED: "1"
      NODE_OPTIONS: "--max_old_space_size=3072"
    steps:
      - uses: actions/checkout@v4
        with: { ref: ${{ inputs.branch }} }
      - uses: actions/setup-node@v4
        with: { node-version: 20, cache: npm }
      - name: Install deps
        run: npm ci
      - name: Build Next & prepare artifact
        run: |
          set -euxo pipefail
          npm run cf:build
          test -d ".vercel/output/static" || { echo "::error::Missing .vercel/output/static"; exit 11; }
          find .vercel/output/static -maxdepth 2 -type f | head -n 100
      - uses: actions/upload-artifact@v4
        with:
          name: cf-pages-artifact-${{ inputs.environment }}
          path: .vercel/output/static
          if-no-files-found: error
      - name: Install Wrangler + jq
        run: |
          npm i -g wrangler
          sudo apt-get update -y && sudo apt-get install -y jq
      - name: Ensure Pages project exists
        id: proj
        run: |
          set -euxo pipefail
          if [ "${{ inputs.environment }}" = production ]; then PROJ=lgfc-prod; BR=main; else PROJ=lgfc-staging; BR=staging; fi
          git ls-remote --heads origin "$BR" >/dev/null 2>&1 || BR=main
          echo "proj=$PROJ" >> $GITHUB_OUTPUT
          echo "branch=$BR" >> $GITHUB_OUTPUT
          wrangler pages project list | tee /tmp/projects.txt || { echo "::error::Failed to list Pages projects"; exit 3; }
          grep -q "$PROJ" /tmp/projects.txt || wrangler pages project create "$PROJ" --production-branch main
      - name: Deploy via Wrangler
        id: deploy
        run: |
          set -euxo pipefail
          PROJ="${{ steps.proj.outputs.proj }}"
          BR="${{ steps.proj.outputs.branch }}"
          OUT=$(wrangler pages deploy .vercel/output/static --project-name "$PROJ" --branch "$BR" --commit-dirty=true --format json)
          echo "$OUT" > /tmp/deploy.json
          URL=$(jq -r '..|.url? // empty' /tmp/deploy.json | tail -n1)
          if [ -z "$URL" ]; then
            wrangler pages deployment list --project-name "$PROJ" --format json > /tmp/list.json || true
            URL=$(jq -r '.[0].url // empty' /tmp/list.json)
          fi
          test -n "$URL" || { echo "::error::Deployed but no URL found (project/branch mismatch)"; exit 17; }
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "::notice::Deployed $PROJ â†’ $URL"
      - name: Smoke check
        run: |
          set -euxo pipefail
          URL="${{ steps.deploy.outputs.url }}"
          CODE=$(curl -s -o /dev/null -w "%{http_code}" "$URL/")
          if [ "$CODE" != 200 ]; then echo "::error::Smoke failed $CODE"; exit 23; fi
          echo "::notice::Homepage 200 OK at $URL/"
      - name: Summary
        run: |
          echo "Env: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "URL: ${{ steps.deploy.outputs.url }}" >> $GITHUB_STEP_SUMMARY
