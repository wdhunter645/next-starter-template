name: CF One-Shot Deploy (Build → Deploy → Smoke)
on:
  workflow_dispatch:
    inputs:
      environment:
        description: "staging or production"
        required: true
        type: choice
        options: [staging, production]
        default: staging
      branch:
        description: "Branch to build"
        required: true
        default: main

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      CF_API_TOKEN:  ${{ secrets.CF_API_TOKEN }}
      CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
      NEXT_TELEMETRY_DISABLED: "1"
      NODE_OPTIONS: "--max_old_space_size=3072"
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Ensure Cloudflare toolchain present in repo
        run: |
          if [ ! -f wrangler.toml ]; then
            cat > wrangler.toml <<'EOF'
          name = "lgfc-site"
          compatibility_date = "2024-10-01"
          pages_build_output_dir = ".vercel/output"
          EOF
          fi

      - name: Inject/merge package.json keys (non-destructive)
        run: |
          sudo apt-get update -y && sudo apt-get install -y jq
          test -f package.json || { echo "::error::package.json missing"; exit 10; }
          TMP=.pkg.tmp.json
          jq '
            .scripts = (.scripts // {}) |
            .scripts["build"] = "next build" |
            .scripts["cf:prep"] = "npx @cloudflare/next-on-pages@latest --experimental-minify" |
            .scripts["cf:build"] = "npm run build && npm run cf:prep" |
            .devDependencies = (.devDependencies // {}) |
            .devDependencies["@cloudflare/next-on-pages"] = "latest" |
            .devDependencies["wrangler"] = "^3"
          ' package.json > "$TMP" && mv "$TMP" package.json
          cat package.json

      - name: Install deps
        run: npm ci

      - name: Build Next + next-on-pages → verify artifact
        run: |
          set -euxo pipefail
          npm run cf:build
          test -d ".vercel/output" || { echo "::error::Missing .vercel/output"; exit 11; }
          find .vercel/output -maxdepth 2 -type f | head -n 100

      - uses: actions/upload-artifact@v4
        with:
          name: cf-pages-artifact-${{ inputs.environment }}
          path: .vercel/output
          if-no-files-found: error

      - name: Install wrangler + jq
        run: |
          npm i -g wrangler@^3
          wrangler --version
          sudo apt-get install -y jq

      - name: Ensure project exists
        id: proj
        run: |
          if [ "${{ inputs.environment }}" = "production" ]; then PROJ="lgfc-prod"; BR="main"; else PROJ="lgfc-staging"; BR="staging"; fi
          wrangler pages project list | tee /tmp/projects.txt
          grep -q "$PROJ" /tmp/projects.txt || wrangler pages project create "$PROJ" --production-branch main
          # If staging branch doesn't exist, deploy against main (still a staging project)
          git ls-remote --heads origin "$BR" >/dev/null 2>&1 || BR="main"
          echo "proj=$PROJ"   >> $GITHUB_OUTPUT
          echo "branch=$BR"   >> $GITHUB_OUTPUT

      - name: Deploy via wrangler (json) → extract URL
        id: deploy
        run: |
          set -euxo pipefail
          PROJ="${{ steps.proj.outputs.proj }}"
          BR="${{ steps.proj.outputs.branch }}"
          OUT=$(wrangler pages deploy .vercel/output --project-name "$PROJ" --branch "$BR" --commit-dirty=true --format json)
          echo "$OUT" > /tmp/deploy.json
          URL=$(jq -r '..|.url? // empty' /tmp/deploy.json | tail -n1)
          if [ -z "$URL" ]; then
            wrangler pages deployment list --project-name "$PROJ" --format json > /tmp/list.json || true
            URL=$(jq -r '.[0].url // empty' /tmp/list.json)
          fi
          test -n "$URL" || { echo "::error::Deployed but no URL found"; exit 17; }
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "::notice::Deployed $PROJ ($BR) → $URL"

      - name: Smoke check /
        run: |
          URL="${{ steps.deploy.outputs.url }}"
          CODE=$(curl -s -o /dev/null -w "%{http_code}" "$URL/")
          if [ "$CODE" != "200" ]; then
            echo "::error::Smoke failed ($CODE) for $URL/"; exit 23; fi
          echo "::notice::Homepage 200 OK at $URL/"

      - name: Summary
        run: |
          echo "Environment: ${{ inputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "URL: ${{ steps.deploy.outputs.url }}"     >> $GITHUB_STEP_SUMMARY
