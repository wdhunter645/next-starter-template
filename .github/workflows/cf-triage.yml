name: CF Triage

on:
  workflow_dispatch:
    inputs:
      environment:
        description: "staging or production"
        required: true
        type: choice
        options: [staging, production]
        default: staging
      branch:
        description: "Branch to build from"
        required: true
        default: main
  workflow_call:
    inputs:
      environment:
        description: "staging or production"
        required: true
        type: string
      branch:
        description: "Branch to build from"
        required: true
        type: string

permissions:
  contents: read

jobs:
  triage-deploy:
    runs-on: ubuntu-latest
    env:
      CF_API_TOKEN:  ${{ secrets.CF_API_TOKEN }}
      CF_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
      NODE_OPTIONS: "--max_old_space_size=3072"
      NEXT_TELEMETRY_DISABLED: "1"
      NPM_CONFIG_LEGACY_PEER_DEPS: "true"
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}

      - name: Tooling
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install deps
        run: npm ci

      - name: Versions & Auth Check
        run: |
          node -v
          npm -v
          npm ls @cloudflare/next-on-pages || true
          npm i -g wrangler
          wrangler --version
          echo "Account ID present? ${CF_ACCOUNT_ID:+yes}"
          if ! wrangler whoami; then
            echo "::error::wrangler whoami failed -> CF_API_TOKEN likely lacks scope or is invalid"
            exit 2
          fi

      - name: List Pages projects (auth & account check)
        run: |
          set -e
          wrangler pages project list | tee /tmp/projects.txt || { echo "::error::Failed to list Pages projects"; exit 3; }

      - name: Build for Cloudflare Pages
        run: |
          set -euo pipefail
          npm run cf:build
          test -d ".vercel/output" || { echo "::error::Missing .vercel/output (next-on-pages produced no artifacts)"; exit 11; }
          echo "Top of artifact:"
          find .vercel/output -maxdepth 2 -type f | head -n 100

      - name: Ensure project exists
        id: proj
        run: |
          if [ "${{ inputs.environment }}" = "production" ]; then PROJ="lgfc-prod"; BR="main"; else PROJ="lgfc-staging"; BR="staging"; fi
          # If staging branch doesn't exist, use main (keeps today moving)
          git ls-remote --heads origin "$BR" || BR="main"
          echo "proj=$PROJ" >> $GITHUB_OUTPUT
          echo "branch=$BR" >> $GITHUB_OUTPUT
          grep -q "$PROJ" /tmp/projects.txt || wrangler pages project create "$PROJ" --production-branch main

      - name: Deploy via Wrangler (JSON) and extract URL
        id: deploy
        run: |
          set -euo pipefail
          PROJ="${{ steps.proj.outputs.proj }}"
          BR="${{ steps.proj.outputs.branch }}"
          OUT=$(wrangler pages deploy .vercel/output --project-name "$PROJ" --branch "$BR" --commit-dirty=true --format json)
          echo "$OUT" > /tmp/deploy.json
          URL=$(jq -r '..|.url? // empty' /tmp/deploy.json | tail -n1)
          if [ -z "$URL" ]; then
            wrangler pages deployment list --project-name "$PROJ" --format json > /tmp/list.json || true
            URL=$(jq -r '.[0].url // empty' /tmp/list.json)
          fi
          if [ -z "$URL" ]; then
            echo "::error::Deployed but no URL found (project or branch mismatch)."
            exit 17
          fi
          echo "url=$URL" >> $GITHUB_OUTPUT
          echo "::notice::Deployed $PROJ on $BR â†’ $URL"

      - name: Smoke check /
        run: |
          URL="${{ steps.deploy.outputs.url }}"
          code=$(curl -s -o /dev/null -w "%{http_code}" "$URL/")
          if [ "$code" != "200" ]; then
            echo "::error::Smoke check failed ($code) for $URL/"
            exit 23
          fi
          echo "::notice::Homepage 200 OK at $URL/"

      - name: Upload artifact (debug if needed)
        uses: actions/upload-artifact@v4
        with:
          name: cf-pages-artifact-${{ inputs.environment }}
          path: .vercel/output
          if-no-files-found: error
